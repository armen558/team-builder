{"version":3,"sources":["serviceWorker.js","actions/authActions.js","Helpers.js","actions/actionTypes.js","actions/topicsActions.js","actions/teamsActions.js","actions/projectsActions.js","components/Header/MyAccountDropdown/MyAccountDropdown.js","components/Header/Navigation/Navigation.js","components/Header/Header.js","components/TeamCard/TeamCard.js","components/Spinner/Spinner.js","reducers/teamsReducer.js","pages/Homepage/Homepage.js","components/LoginForm/LoginForm.js","pages/Login/Login.js","pages/MyAccount/MyAccount.js","components/RegisterForm/RegisterForm.js","pages/Register/Register.js","components/Topic/Topic.js","components/Topic/TopicForm/TopicForm.js","pages/Topics/Topics.js","pages/Projects/Projects.js","pages/NotFound404/NotFound404.js","components/TeamBuilder/TeamBuilder.js","App.js","reducers/authReducer.js","reducers/topicsReducer.js","reducers/projectsReducer.js","store/store.js","index.js"],"names":["Boolean","window","location","hostname","match","fetchCompaniesList","dispatch","fetch","then","resp","json","data","type","payload","fetchCompaniesSuccess","catch","err","fetchCompaniesFail","login","email","password","method","body","JSON","stringify","headers","loginRequest","status","Error","sessionStorage","setItem","token","loginSuccess","console","log","loginFail","register","userData","logout","logoutRequest","logoutFail","fetchUser","getUser","fetchUserSuccess","fetchUserFail","fetchTopics","fetchTopicsReguest","fetchTopicsSuccess","fetchTopicsSFail","addTopic","title","addTopicRequest","topicAddSuccess","topicAddFail","topicVote","id","voteTopicRequest","topicVoteFail","deleteTopic","deleteTopicRequest","topicDeleteFail","fetchTeams","fetchTeamsRequest","fetchTeamsSuccess","fetchTeamsFail","fetchProjects","fetchProjectsRequest","fetchProjectsSuccess","fetchProjectsFail","projectVote","voteProjectsRequest","projectVoteFail","MyAccountDropdown","state","isDropdownOpen","handleDropdownOpen","setState","prevState","className","onClick","this","to","src","props","avatarUrl","React","Component","Navigation","loggedInMenu","exact","loggedIn","connect","auth","userInfo","onLogout","actions","TeamCard","name","topic","project","members","map","member","key","firstName","lastName","Spinner","initialState","teams","isLoading","error","reducer","action","message","Homepage","componentDidMount","onFetchTeams","team","String","LoginForm","handleChange","event","target","value","handleSubmit","preventDefault","submit","onSubmit","placeholder","onChange","_","onLogin","MyAccount","inputs","onFetchUser","birthDate","checked","sex","htmlFor","jsExperience","reactExperience","companyId","companies","company","disabled","loading","onUserUpdate","info","RegisterForm","submitForm","Register","isRegistered","onRegister","regError","Topic","voteType","votedByMe","votingsCount","voting","canDelete","deleting","TopicForm","input","Topics","onTopicsFetch","handleTopicAdd","onTopicAdd","handleVoting","onTopicVote","handleDelete","onDeleteTopic","setTimeout","topics","topicsList","Projects","onProjectsFetch","onProjectVote","projects","description","NotFound404","TeamBuilder","length","onCompanyFetch","path","component","Login","App","getItem","removeItem","topicAdded","rootReducer","combineReducers","authReducer","topicsReducer","teamsReducer","projectsReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.98f47595.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import * as actionTypes from './actionTypes';\r\nimport { fetchCompanies, loginRequest, registerRequest, logoutRequest, getUser } from '../Helpers';\r\n\r\nconst fetchCompaniesSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_COMPANIES_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\nconst fetchCompaniesFail = (err) => {\r\n    return {\r\n        type: actionTypes.FETCH_COMPANIES_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const fetchCompaniesList = () => {\r\n    return dispatch => {\r\n        fetchCompanies()\r\n            .then(data => dispatch(fetchCompaniesSuccess(data)))\r\n            .catch(err => fetchCompaniesFail(err))\r\n    };\r\n};\r\n\r\nconst loginStart = () => {\r\n    return {\r\n        type: actionTypes.LOGIN_START,\r\n    };\r\n};\r\nconst loginSuccess = (data) => {\r\n    sessionStorage.setItem('userToken', data.token)\r\n    return {\r\n        type: actionTypes.LOGIN_SUCCESS,\r\n        payload: data,\r\n    };\r\n};\r\nconst loginFail = (err) => {\r\n    console.log(err)\r\n    return {\r\n        type: actionTypes.LOGIN_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const login = (email, password) => {\r\n    return dispatch => {\r\n        dispatch(loginStart());\r\n        loginRequest(email, password)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json()\r\n                } else {\r\n                    throw new Error('Login failed')\r\n                }\r\n            })\r\n            .then(data => dispatch(loginSuccess(data)))\r\n            .catch(err => dispatch(loginFail(err)))\r\n    };\r\n};\r\n\r\n\r\nconst registerStart = () => {\r\n    return {\r\n        type: actionTypes.REGISTER_START\r\n    };\r\n};\r\nconst registerSuccess = (message) => {\r\n    return {\r\n        type: actionTypes.REGISTER_SUCCESS,\r\n        payload: message\r\n    };\r\n}; const registerFail = (err) => {\r\n    return {\r\n        type: actionTypes.REGISTER_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const register = (data) => {\r\n    return dispatch => {\r\n        dispatch(registerStart());\r\n        registerRequest(data)\r\n            .then(resp => resp)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    console.log('You have registered successfully', resp)\r\n                    dispatch(registerSuccess(\"You have registered successfully\"))\r\n                } else {\r\n                    console.log('Something went wrong while registering', resp)\r\n                    dispatch(registerFail(\"something went wrong while registering\"))\r\n                }\r\n            })\r\n    };\r\n};\r\n\r\nconst logoutSuccess = () => {\r\n    return {\r\n        type: actionTypes.LOGOUT_SUCCESS\r\n    };\r\n};\r\nconst logoutFail = (err) => {\r\n    return {\r\n        type: actionTypes.LOGOUT_FAIL,\r\n        payload: err\r\n    };\r\n};\r\nexport const logout = (token) => {\r\n    return dispatch => {\r\n        logoutRequest(token).then(resp => {\r\n            if (resp.status === 200) {\r\n                dispatch(logoutSuccess())\r\n            } else {\r\n                throw new Error('Logout failed')\r\n            }\r\n        })\r\n            .catch(err => dispatch(logoutFail(err)))\r\n    }\r\n}\r\n\r\nconst fetchUserStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_USER_START\r\n    };\r\n};\r\nconst fetchUserSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_USER_SUCCESS,\r\n        payload: data,\r\n    };\r\n};\r\nconst fetchUserFail = (err) => {\r\n    return {\r\n        type: actionTypes.FETCH_USER_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const fetchUser = (token) => {\r\n    return dispatch => {\r\n        dispatch(fetchUserStart());\r\n        getUser(token)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json()\r\n                } else {\r\n                    throw new Error('User data failed to get by token')\r\n                }\r\n            })\r\n            .then(data => dispatch(fetchUserSuccess(data)))\r\n            .catch(err => dispatch(fetchUserFail(err)))\r\n\r\n    };\r\n};\r\n\r\n","export const fetchCompanies = () => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/companies')\r\n        .then(resp => resp.json())\r\n        .then(data => data)\r\n};\r\n\r\nexport const loginRequest = (email, password) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/users/login', {\r\n        method: 'POST',\r\n        body: JSON.stringify({\r\n            email: email,\r\n            password: password\r\n        }),\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        }\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const registerRequest = (userData) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/users/register', {\r\n        method: 'POST',\r\n        headers: {\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n    })\r\n        .then(resp => resp)\r\n};\r\n\r\nexport const logoutRequest = (token) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/users/logout', {\r\n        method: 'GET',\r\n        headers: {\r\n            token,\r\n        }\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const getUser = (token) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/users', {\r\n        method: 'GET',\r\n        headers: {\r\n            token,\r\n        }\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const fetchTopicsReguest = (token) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/topics', {\r\n        method: 'GET',\r\n        headers: {\r\n            token,\r\n            // Origin: 'http://localhost:3000/',\r\n            'Content-Type': 'application/json',\r\n        }\r\n    }).then(resp => resp)\r\n}\r\n\r\nexport const addTopicRequest = (token, title) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/topics', {\r\n        method: 'POST',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            title\r\n        })\r\n\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const voteTopicRequest = (token, type, id) => {\r\n    return fetch(`https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/topics/${id}/voting`, {\r\n        method: 'POST',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            type\r\n        })\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const deleteTopicRequest = (token, id) => {\r\n    return fetch(`https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/topics/${id}`, {\r\n        method: 'DELETE',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const fetchTeamsRequest = (token) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/teams', {\r\n        method: 'GET',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        }\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const fetchProjectsRequest = (token) => {\r\n    return fetch('https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/projects', {\r\n        method: 'GET',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        },\r\n    }).then(resp => resp)\r\n};\r\n\r\nexport const voteProjectsRequest = (token, type, id) => {\r\n    return fetch(`https://picsart-bootcamp-2020-api.herokuapp.com/api/v1/projects/${id}/voting`, {\r\n        method: 'POST',\r\n        headers: {\r\n            token,\r\n            'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n            type\r\n        })\r\n    }).then(resp => resp)\r\n};","export const FETCH_COMPANIES_SUCCESS = 'FETCH_COMPANIES_SUCCESS';\r\nexport const FETCH_COMPANIES_FAIL = 'FETCH_COMPANIES_FAIL';\r\n\r\nexport const LOGIN_START = 'LOGIN_START';\r\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const LOGIN_FAIL = 'LOGIN_FAIL';\r\n\r\nexport const REGISTER_START = 'REGISTER_START';\r\nexport const REGISTER_SUCCESS = 'REGISTER_SUCCESS';\r\nexport const REGISTER_FAIL = 'REGISTER_FAIL';\r\n\r\nexport const FETCH_USER_START = 'fETCH_USER_START';\r\nexport const FETCH_USER_SUCCESS = 'fETCH_USER_SUCCESS';\r\nexport const FETCH_USER_FAIL = 'fETCH_USER_FAIL';\r\n\r\nexport const LOGOUT_SUCCESS = 'LOGLOGOUT_SUCCESSOUT';\r\nexport const LOGOUT_FAIL = 'LOGOUT_FAIL';\r\n\r\nexport const FETCH_TOPICS_START = 'FETCH_TOPICS_START';\r\nexport const FETCH_TOPICS_SUCCESS = 'FETCH_TOPICS_SUCCESS';\r\nexport const FETCH_TOPICS_FAIL = 'FETCH_TOPICS_FAIL';\r\n\r\nexport const ADD_TOPIC_START = 'ADD_TOPIC_START';\r\nexport const ADD_TOPIC_SUCCESS = 'ADD_TOPIC_SUCCESS';\r\nexport const ADD_TOPIC_FAIL = 'ADD_TOPIC_FAIL';\r\n\r\nexport const VOTE_TOPIC_START = 'VOTE_TOPIC_START';\r\nexport const VOTE_TOPIC_SUCCESS = 'VOTE_TOPIC_SUCCESS';\r\nexport const VOTE_TOPIC_FAIL = 'VOTE_TOPIC_FAIL';\r\n\r\nexport const DELETE_TOPIC_START = 'DELETE_TOPIC_START';\r\nexport const DELETE_TOPIC_SUCCESS = 'DELETE_TOPIC_SUCCESS';\r\nexport const DELETE_TOPIC_FAIL = 'DELETE_TOPIC_FAIL';\r\n\r\n\r\nexport const FETCH_TEAMS_START = 'FETCH_TEAMS_START';\r\nexport const FETCH_TEAMS_SUCCESS = 'FETCH_TEAMS_SUCCESS';\r\nexport const FETCH_TEAMS_FAIL = 'FETCH_TEAMS_FAIL';\r\n\r\nexport const FETCH_PROJECTS_START = 'FETCH_PROJECTS_START';\r\nexport const FETCH_PROJECTS_SUCCESS = 'FETCH_PROJECTS_SUCCESS';\r\nexport const FETCH_PROJECTS_FAIL = 'FETCH_PROJECTS_FAIL';\r\n\r\nexport const VOTE_PROJECT_START = 'VOTE_PROJECT_START';\r\nexport const VOTE_PROJECT_SUCCESS = 'VOTE_PROJECT_SUCCESS';\r\nexport const VOTE_PROJECT_FAIL = 'VOTE_PROJECT_FAIL';","import * as actionTypes from './actionTypes';\r\nimport { fetchTopicsReguest, addTopicRequest, voteTopicRequest, deleteTopicRequest } from '../Helpers';\r\n\r\nconst fetchTopicsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_TOPICS_START\r\n    };\r\n};\r\nconst fetchTopicsSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_TOPICS_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\nconst fetchTopicsSFail = (err) => {\r\n    return {\r\n        type: actionTypes.FETCH_TOPICS_FAIL,\r\n        payload: err\r\n    };\r\n};\r\nexport const fetchTopics = (token) => {\r\n    return dispatch => {\r\n        dispatch(fetchTopicsStart());\r\n        fetchTopicsReguest(token)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json();\r\n                } else {\r\n                    throw new Error('Topics dispatch failed.')\r\n                }\r\n            })\r\n            .then(data => dispatch(fetchTopicsSuccess(data)))\r\n            .catch(err => dispatch(fetchTopicsSFail(err)))\r\n    }\r\n}\r\n\r\nconst topicAddStart = () => {\r\n    return {\r\n        type: actionTypes.ADD_TOPIC_START\r\n    };\r\n};\r\nconst topicAddSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.ADD_TOPIC_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\nconst topicAddFail = (err) => {\r\n    return {\r\n        type: actionTypes.ADD_TOPIC_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const addTopic = (token, title) => {\r\n    return dispatch => {\r\n        dispatch(topicAddStart());\r\n        addTopicRequest(token, title)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json()\r\n                } else {\r\n                    throw new Error('Topic addition failed')\r\n                }\r\n            })\r\n            .then(data => {\r\n                dispatch(topicAddSuccess(data))\r\n                dispatch(fetchTopics(token))\r\n            })\r\n            .catch(err => dispatch(topicAddFail(err)))\r\n    }\r\n}\r\n\r\nconst topicVoteStart = () => {\r\n    return {\r\n        type: actionTypes.VOTE_TOPIC_START\r\n    };\r\n};\r\nconst topicVoteSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.VOTE_TOPIC_SUCCESS,\r\n    };\r\n};\r\nconst topicVoteFail = (err) => {\r\n    return {\r\n        type: actionTypes.VOTE_TOPIC_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const topicVote = (token, type, id) => {\r\n    return dispatch => {\r\n        dispatch(topicVoteStart())\r\n        voteTopicRequest(token, type, id)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    dispatch(topicVoteSuccess());\r\n                    dispatch(fetchTopics(token))\r\n                } else {\r\n                    throw new Error('Voting failed')\r\n                }\r\n            }).catch(err => dispatch(topicVoteFail(err)))\r\n    }\r\n}\r\n\r\n\r\nconst topicDeleteStart = () => {\r\n    return {\r\n        type: actionTypes.DELETE_TOPIC_START\r\n    };\r\n};\r\nconst topicDeleteSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.DELETE_TOPIC_SUCCESS,\r\n    };\r\n};\r\nconst topicDeleteFail = (err) => {\r\n    return {\r\n        type: actionTypes.DELETE_TOPIC_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const deleteTopic = (token, id) => {\r\n    return dispatch => {\r\n        dispatch(topicDeleteStart())\r\n        deleteTopicRequest(token, id)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    dispatch(topicDeleteSuccess());\r\n                    dispatch(fetchTopics(token))\r\n                } else {\r\n                    throw new Error('Deleting failed')\r\n                }\r\n            }).catch(err => dispatch(topicDeleteFail(err)))\r\n    };\r\n};\r\n\r\n\r\n\r\n","import * as actionTypes from './actionTypes';\r\nimport { fetchTeamsRequest } from '../Helpers';\r\n\r\nconst fetchTeamsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_TEAMS_START\r\n    };\r\n};\r\nconst fetchTeamsSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_TEAMS_SUCCESS,\r\n        payload: data,\r\n    };\r\n};\r\nconst fetchTeamsFail = (err) => {\r\n    return {\r\n        type: actionTypes.FETCH_TEAMS_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const fetchTeams = (token) => {\r\n    return dispatch => {\r\n        dispatch(fetchTeamsStart());\r\n        fetchTeamsRequest(token)\r\n            .then(resp => {\r\n                if(resp.status === 200) {\r\n                    return resp.json()\r\n                } else {\r\n                    throw new Error('Teams fetch failed.')\r\n                }\r\n            })\r\n            .then(data => dispatch(fetchTeamsSuccess(data)))\r\n            .catch(err => dispatch(fetchTeamsFail(err)))\r\n    }\r\n}","import * as actionTypes from './actionTypes';\r\nimport { fetchProjectsRequest, voteProjectsRequest } from '../Helpers';\r\n\r\nconst fetchProjectsStart = () => {\r\n    return {\r\n        type: actionTypes.FETCH_PROJECTS_START\r\n    };\r\n};\r\nconst fetchProjectsSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_PROJECTS_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\nconst fetchProjectsFail = (err) => {\r\n    return {\r\n        type: actionTypes.FETCH_PROJECTS_FAIL,\r\n        payload: err\r\n    };\r\n};\r\nexport const fetchProjects = (token) => {\r\n    return dispatch => {\r\n        dispatch(fetchProjectsStart());\r\n        fetchProjectsRequest(token)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    return resp.json();\r\n                } else {\r\n                    throw new Error('Topics dispatch failed.')\r\n                }\r\n            })\r\n            .then(data => dispatch(fetchProjectsSuccess(data)))\r\n            .catch(err => dispatch(fetchProjectsFail(err)))\r\n    }\r\n}\r\n\r\n\r\n\r\nconst projectVoteStart = () => {\r\n    return {\r\n        type: actionTypes.VOTE_PROJECT_START\r\n    };\r\n};\r\nconst projectVoteSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.VOTE_PROJECT_SUCCESS,\r\n    };\r\n};\r\nconst projectVoteFail = (err) => {\r\n    return {\r\n        type: actionTypes.VOTE_PROJECT_FAIL,\r\n        payload: err\r\n    };\r\n};\r\n\r\nexport const projectVote = (token, type, id) => {\r\n    return dispatch => {\r\n        dispatch(projectVoteStart())\r\n        voteProjectsRequest(token, type, id)\r\n            .then(resp => {\r\n                if (resp.status === 200) {\r\n                    dispatch(projectVoteSuccess());\r\n                    dispatch(fetchProjects(token))\r\n                } else {\r\n                    throw new Error('Voting failed')\r\n                }\r\n            }).catch(err => dispatch(projectVoteFail(err)))\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './MyAccountDropdown.css';\r\n\r\nclass MyAccountDropdown extends React.Component {\r\n\r\n    state = {\r\n        isDropdownOpen: false\r\n    }\r\n\r\n    handleDropdownOpen = () => {\r\n        this.setState(prevState => {\r\n            return {\r\n                isDropdownOpen: !prevState.isDropdownOpen\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"accDropdownWrap\">\r\n                <span className=\"myAccBtn\" onClick={this.handleDropdownOpen}>My Account</span>\r\n                <div className={`dropdown ${this.state.isDropdownOpen ? 'open' : ''}`}>\r\n                    <Link to=\"my-account\" onClick={this.handleDropdownOpen}><img src={this.props.avatarUrl} className=\"avatar\" /></Link>\r\n                    <Link to=\"my-account\" onClick={this.handleDropdownOpen}>Edit my account</Link>\r\n                    <span className=\"logoutBtn\" onClick={this.props.logout}>Log out</span>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default MyAccountDropdown;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nimport MyAccountDropdown from '../MyAccountDropdown/MyAccountDropdown';\r\n\r\nimport './Navigation.css';\r\n\r\nconst Navigation = props => {\r\n\r\n    let loggedInMenu = (\r\n        <>\r\n            <li><NavLink to=\"/\" exact>Home</NavLink></li>\r\n            <li><NavLink to=\"/topics\">Topics</NavLink></li>\r\n            <li><NavLink to=\"/projects\">Projects</NavLink></li>\r\n        </>\r\n    )\r\n    if (!props.loggedIn) {\r\n        loggedInMenu = <li><NavLink to=\"login\">Log In</NavLink></li>\r\n    }\r\n\r\n    return (\r\n        <div className=\"navigation\">\r\n            <ul className=\"mainMenu\">\r\n                {loggedInMenu}\r\n            </ul>\r\n            {props.loggedIn ? <MyAccountDropdown logout={props.logout} avatarUrl={props.avatarUrl}/> : null}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport * as actions from '../../actions';\r\nimport Navigation from './Navigation/Navigation';\r\n\r\nimport './Header.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <div className=\"header\">\r\n            <Navigation\r\n                loggedIn={props.token}\r\n                logout={() => props.onLogout(props.token)}\r\n                avatarUrl={props.userInfo.avatarUrl} />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        userInfo: state.auth.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onLogout: (token) => dispatch(actions.logout(token))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\r\n","import React from 'react';\r\n\r\nimport './TeamCard.css';\r\n\r\nconst TeamCard = props => {\r\n    return (\r\n        <div className=\"teamCard\">\r\n            <p>Team name: {props.name}</p>\r\n            <p>Topic: {props.topic}</p>\r\n            <p>Project: {props.project}</p>\r\n            <h5>Members</h5>\r\n            <div className=\"members\">{props.members.map(member => (\r\n                    <p key={member.avatarUrl}>Name: {member.firstName} {member.lastName}</p>\r\n            ))}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TeamCard;","import React from 'react';\r\n\r\nimport './Spinner.css';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"lds-ellipsis\"><div></div><div></div><div></div><div></div></div>\r\n    )\r\n};\r\n\r\nexport default Spinner;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    teams: [\r\n        {\r\n           id: 1,\r\n           name: \"Editor\",\r\n           topic: \"Hooks\",\r\n           project: \"Canvas\",\r\n           members: [\r\n              {\r\n                  firstName: \"Name\",\r\n                  lastName: \"Lname\",\r\n                  avatarUrl: \"test.jpg\"\r\n              }\r\n           ]\r\n        },\r\n        {\r\n            id:2,\r\n            name: \"Editor\",\r\n            topic: \"Hooks\",\r\n            project: \"Canvas\",\r\n            members: [\r\n               {\r\n                   firstName: \"Name\",\r\n                   lastName: \"Lname\",\r\n                   avatarUrl: \"test.jpg\"\r\n               }\r\n            ]\r\n         },\r\n         {\r\n            id: 3,\r\n            name: \"Editor\",\r\n            topic: \"Hooks\",\r\n            project: \"Canvas\",\r\n            members: [\r\n               {\r\n                   firstName: \"Name\",\r\n                   lastName: \"Lname\",\r\n                   avatarUrl: \"test.jpg\"\r\n               }\r\n            ]\r\n         },\r\n      ],\r\n    isLoading: false,\r\n    error: '',\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_TEAMS_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                error: '',\r\n            }\r\n        case actionTypes.FETCH_TEAMS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                teams: action.payload,\r\n                error: ''\r\n            }\r\n        case actionTypes.FETCH_TEAMS_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        default:\r\n            return state\r\n    };\r\n};\r\n\r\nexport default reducer;","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nimport TeamCard from '../../components/TeamCard/TeamCard';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport * as actions from '../../actions';\r\n\r\nimport './Homepage.css';\r\nimport reducer from '../../reducers/teamsReducer';\r\n\r\nclass Homepage extends React.Component {\r\n    componentDidMount = () => {\r\n        this.props.onFetchTeams(this.props.token)\r\n    }\r\n\r\n    render() {\r\n\r\n        let teams = <Spinner />;\r\n        if (!this.props.isLoading) {\r\n            teams = this.props.teams.map(team => {\r\n                return (\r\n                    <TeamCard\r\n                        name={team.name}\r\n                        topic={team.topic}\r\n                        project={team.project}\r\n                        members={team.members}\r\n                        key={String(team.id)}\r\n                    />\r\n                )\r\n            })\r\n        }\r\n\r\n        return (\r\n            <>\r\n            {this.props.token ? null : <Redirect to=\"login\"/>}\r\n                <h1>Teams</h1>\r\n                <div className=\"teams\">\r\n                    {teams}\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        error: state.teams.error,\r\n        isLoading: state.teams.isLoading,\r\n        teams: state.teams.teams,\r\n        token: state.auth.token,\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchTeams: (token) => dispatch(actions.fetchTeams(token))\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Homepage);","import React from 'react';\r\n\r\nclass LoginForm extends React.Component {\r\n    state = {\r\n        email: '',\r\n        password: ''\r\n    }\r\n\r\n    handleChange = (event, type) => {\r\n        this.setState({ [type]: event.target.value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submit(this.state.email, this.state.password);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"loginForm\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input\r\n                        type=\"email\" \r\n                        placeholder=\"Email\" \r\n                        onChange={(_) => this.handleChange(_, 'email')}\r\n                        value={this.state.email} />\r\n                    <input\r\n                        type=\"password\" \r\n                        placeholder=\"Password\" \r\n                        onChange={(_) => this.handleChange(_, 'password')}\r\n                        value={this.state.password} />\r\n                    <input type=\"submit\" value=\"Log in\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default LoginForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect, Link } from 'react-router-dom';\r\n\r\nimport LoginForm from '../../components/LoginForm/LoginForm';\r\nimport * as actions from '../../actions';\r\n\r\nconst Login = props => {\r\n    return (\r\n        <>\r\n            {props.token ? <Redirect to=\"/\" /> : null}\r\n            <div>\r\n                {/* {this.props.token ? <Redirect to=\"/\" /> : null} */}\r\n                <LoginForm submit={props.onLogin} />\r\n                {props.error ? <div className=\"error\"> {props.error} </div> : null}\r\n                <div className=\"note\">Don't have account yet? <Link to=\"register\">Sign Up</Link></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        error: state.auth.error\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onLogin: (email, password) => dispatch(actions.login(email, password)),\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\n\r\n// {\r\n//     \"email\": \"example@gmail.com\",\r\n//     \"firstName\": \"John\",\r\n//     \"lastName\": \"Whexler\",\r\n//     \"birthDate\": \"2000-02-01\",\r\n//     \"sex\": \"male\",\r\n//     \"avatarUrl\": \"https://images.unsplash.c.....\",\r\n//     \"jsExperience\": 10,\r\n//     \"reactExperience\": 1,\r\n//     \"companyId\": 1,\r\n//     \"token\": \"5f0ddc8933e5a17932fa4acc\"\r\n// }\r\n\r\n\r\nclass MyAccount extends React.Component {\r\n    state = {\r\n        inputs: {...this.props.userInfo}\r\n    };\r\n\r\n    componentDidMount = () => {\r\n        console.log('update')\r\n        this.props.onFetchUser(this.props.token)\r\n    }\r\n\r\n    render() {\r\n        console.log(this.props.userInfo)\r\n        return (\r\n            <>\r\n            {this.props.token ? null : <Redirect to=\"/login\"/>}\r\n            <div>\r\n                <form >\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        onChange={(_) => this.handleChange(_, 'email')}\r\n                        value={this.state.inputs.email} />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={(_) => this.handleChange(_, 'password')}\r\n                        value={this.state.inputs.password} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"First Name\"\r\n                        onChange={(_) => this.handleChange(_, 'firstName')}\r\n                        value={this.state.inputs.firstName} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Last Name\"\r\n                        onChange={(_) => this.handleChange(_, 'lastName')}\r\n                        value={this.state.inputs.lastName} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Birth Date\"\r\n                        onChange={(_) => this.handleChange(_, 'birthDate')}\r\n                        value={this.state.inputs.birthDate} />\r\n\r\n                    <div className=\"radioInputs\">\r\n                        <input\r\n                            id=\"male\"\r\n                            type=\"radio\"\r\n                            name=\"sex\"\r\n                            value=\"male\"\r\n                            onChange={(_) => this.handleChange(_, 'sex')}\r\n                            checked={this.state.inputs.sex === \"male\"}\r\n                        />\r\n                        <label htmlFor=\"male\">Male</label>\r\n                        <input\r\n                            id=\"female\"\r\n                            type=\"radio\"\r\n                            name=\"sex\"\r\n                            value=\"female\"\r\n                            onChange={(_) => this.handleChange(_, 'sex')}\r\n                            checked={this.state.inputs.sex === \"female\"}\r\n                        />\r\n                        <label htmlFor=\"female\">Female</label>\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Avatar URL\"\r\n                        onChange={(_) => this.handleChange(_, 'avatarUrl')}\r\n                        value={this.state.inputs.avatarUrl} />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"JS Experience\"\r\n                        onChange={(_) => this.handleChange(_, 'jsExperience')}\r\n                        value={this.state.inputs.jsExperience} />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"React Experience\"\r\n                        onChange={(_) => this.handleChange(_, 'reactExperience')}\r\n                        value={this.state.inputs.reactExperience} />\r\n                    <select\r\n                        onChange={(_) => this.handleChange(_, 'companyId')}\r\n                        value={this.state.inputs.companyId}\r\n                    >\r\n                        <option value=''>Choose company</option>\r\n                        {this.props.companies.map(company => (\r\n                            <option key={`${company.id}`} value={company.id}>\r\n                                {company.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <input type=\"submit\" value=\"Register\" disabled={this.props.loading} />\r\n                </form>\r\n            </div>\r\n            </>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        companies: state.auth.companies,\r\n        userInfo: state.auth.userInfo\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onFetchUser: (token) => dispatch(actions.fetchUser(token)),\r\n        onUserUpdate: (info) => dispatch()\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(MyAccount);","import React from 'react';\r\n\r\nclass RegisterForm extends React.Component {\r\n    state = {\r\n        inputs: {\r\n            \"email\": \"\",\r\n            \"password\": \"\",\r\n            \"firstName\": \"\",\r\n            \"lastName\": \"\",\r\n            \"birthDate\": \"\",\r\n            \"sex\": \"\",\r\n            \"avatarUrl\": \"\",\r\n            \"jsExperience\": '',\r\n            \"reactExperience\": '',\r\n            \"companyId\": 0,\r\n        },\r\n    }\r\n\r\n\r\n    handleChange = (event, type) => {\r\n        const inputs = { ...this.state.inputs, [type]: event.target.value };\r\n        if (type === 'companyId') {\r\n            inputs.companyId = +event.target.value;\r\n        }\r\n        this.setState({ inputs });\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submitForm(this.state.inputs);\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"registerForm\">\r\n                <form onSubmit={(_) => this.handleSubmit(_)}>\r\n                    <input\r\n                        type=\"email\"\r\n                        placeholder=\"Email\"\r\n                        onChange={(_) => this.handleChange(_, 'email')}\r\n                        value={this.state.inputs.email} />\r\n                    <input\r\n                        type=\"password\"\r\n                        placeholder=\"Password\"\r\n                        onChange={(_) => this.handleChange(_, 'password')}\r\n                        value={this.state.inputs.password} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"First Name\"\r\n                        onChange={(_) => this.handleChange(_, 'firstName')}\r\n                        value={this.state.inputs.firstName} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Last Name\"\r\n                        onChange={(_) => this.handleChange(_, 'lastName')}\r\n                        value={this.state.inputs.lastName} />\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Birth Date\"\r\n                        onChange={(_) => this.handleChange(_, 'birthDate')}\r\n                        value={this.state.inputs.birthDate} />\r\n\r\n                    <div className=\"radioInputs\">\r\n                        <input\r\n                            id=\"male\"\r\n                            type=\"radio\"\r\n                            name=\"sex\"\r\n                            value=\"male\"\r\n                            onChange={(_) => this.handleChange(_, 'sex')}\r\n                            checked={this.state.inputs.sex === \"male\"}\r\n                        />\r\n                        <label htmlFor=\"male\">Male</label>\r\n                        <input\r\n                            id=\"female\"\r\n                            type=\"radio\"\r\n                            name=\"sex\"\r\n                            value=\"female\"\r\n                            onChange={(_) => this.handleChange(_, 'sex')}\r\n                            checked={this.state.inputs.sex === \"female\"}\r\n                        />\r\n                        <label htmlFor=\"female\">Female</label>\r\n                    </div>\r\n                    <input\r\n                        type=\"text\"\r\n                        placeholder=\"Avatar URL\"\r\n                        onChange={(_) => this.handleChange(_, 'avatarUrl')}\r\n                        value={this.state.inputs.avatarUrl} />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"JS Experience\"\r\n                        onChange={(_) => this.handleChange(_, 'jsExperience')}\r\n                        value={this.state.inputs.jsExperience} />\r\n                    <input\r\n                        type=\"number\"\r\n                        placeholder=\"React Experience\"\r\n                        onChange={(_) => this.handleChange(_, 'reactExperience')}\r\n                        value={this.state.inputs.reactExperience} />\r\n                    <select\r\n                        onChange={(_) => this.handleChange(_, 'companyId')}\r\n                        value={this.state.inputs.companyId}\r\n                    >\r\n                        <option value=''>Choose company</option>\r\n                        {this.props.companies.map(company => (\r\n                            <option key={`${company.id}`} value={company.id}>\r\n                                {company.name}\r\n                            </option>\r\n                        ))}\r\n                    </select>\r\n                    <input type=\"submit\" value=\"Register\" disabled={this.props.loading} />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default RegisterForm;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\nimport RegisterForm from '../../components/RegisterForm/RegisterForm';\r\n\r\nclass Register extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.props.isRegistered\r\n                    ? <p>You have registered successfully. Please <Link to=\"/login\">login here</Link></p>\r\n                    : <RegisterForm\r\n                        companies={this.props.companies}\r\n                        loading={this.props.isLoading}\r\n                        submitForm={this.props.onRegister}\r\n                    />\r\n                }\r\n                {this.props.regError ? <div className=\"error\">{this.props.regError}</div> : null}\r\n                <div className=\"note\">Already have an account? <Link to=\"login\">Log in</Link></div>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        token: state.auth.token,\r\n        companies: state.auth.companies,\r\n        regError: state.auth.regError,\r\n        isRegistered: state.auth.isRegistered,\r\n        isLoading: state.auth.isLoading\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        onRegister: (data) => dispatch(actions.register(data))\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Register);","import React from 'react';\r\n\r\nimport './Topic.css';\r\n\r\nconst Topic = props => {\r\n\r\n    let voteType = 'like';\r\n    if (props.votedByMe) {\r\n        voteType = 'unlike';\r\n    }\r\n\r\n    return (\r\n        <div className=\"topic\">\r\n            <h4>{props.title}</h4>\r\n            <div className=\"btnsWrap\">\r\n                {props.votingsCount ? <div className=\"votes\">Votes: {props.votingsCount}</div> : null}\r\n                <button\r\n                    className={`likeBtn ${props.votedByMe ? 'liked' : ''}`}\r\n                    onClick={() => props.voting(voteType, props.id)}\r\n                >\r\n                    Like{props.votedByMe ? 'd' : ''}\r\n                </button>\r\n                <button\r\n                    className=\"deletBtn\"\r\n                    disabled={!props.canDelete}\r\n                    onClick={() => props.deleting(props.id)}\r\n                >×</button>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Topic;","import React from 'react';\r\n\r\nimport './TopicForm.css';\r\n\r\nclass TopicForm extends React.Component {\r\n    \r\n    state = {\r\n        input: ''\r\n    };\r\n\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.submit(this.state.input);\r\n        this.setState({input: ''})\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({input: event.target.value})\r\n    };\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"topicForm\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" value={this.state.input} placeholder=\"Topic title\" onChange={this.handleChange}/>\r\n                    <input type=\"submit\" value=\"Add\"/>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TopicForm","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect} from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\nimport Topic from '../../components/Topic/Topic';\r\nimport TopicForm from '../../components/Topic/TopicForm/TopicForm';\r\n\r\n\r\nclass Topics extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.props.onTopicsFetch(this.props.token);\r\n    }\r\n\r\n    handleTopicAdd = (title) => {\r\n        this.props.onTopicAdd(this.props.token, title)\r\n    }\r\n\r\n    handleVoting = (type, id) => {\r\n        this.props.onTopicVote(this.props.token, type, id)\r\n    }\r\n\r\n    handleDelete = (id) => {\r\n        this.props.onDeleteTopic(this.props.token, id)\r\n    }\r\n\r\n    render() {\r\n        setTimeout(() => {\r\n            // this.props.onTopicsFetch(this.props.token);\r\n        }, 5000);\r\n\r\n        return (\r\n            <>\r\n            {this.props.token ? null : <Redirect to=\"/login\"/>}\r\n            <div className=\"topics\">\r\n                <TopicForm submit={this.handleTopicAdd}/>\r\n                {this.props.topics.map(topic => (\r\n                    <Topic \r\n                        title={topic.title}\r\n                        votingsCount={topic.votingsCount}\r\n                        key={topic.id}\r\n                        id={topic.id}\r\n                        votedByMe={topic.votedByMe}\r\n                        canDelete={topic.canDelete}\r\n                        voting={this.handleVoting}\r\n                        deleting={this.handleDelete}\r\n                    />\r\n                ))}\r\n            </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth.token,\r\n        topics: state.topics.topicsList\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onTopicsFetch: (token) => dispatch(actions.fetchTopics(token)),\r\n        onTopicAdd: (token, title) => dispatch(actions.addTopic(token, title)),\r\n        onTopicVote: (token, type, id) => dispatch(actions.topicVote(token, type, id)),\r\n        onDeleteTopic: (token, id) => dispatch(actions.deleteTopic(token, id))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Topics);","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\n\r\nimport './Projects.css';\r\n\r\nclass Projects extends React.Component {\r\n\r\n    componentDidMount = () => {\r\n        this.props.onProjectsFetch(this.props.token);\r\n    }\r\n\r\n    handleVoting = (type, id) => {\r\n        let voteType = 'like';\r\n        if (type) {\r\n            voteType = 'unlike'\r\n        }\r\n        this.props.onProjectVote(this.props.token, voteType, id)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.token ? null : <Redirect to=\"/login\" />}\r\n                <div className=\"projectList\">\r\n                    {this.props.projects.map(project => (\r\n                        <div className=\"project\" key={String(project.id)}>\r\n                            <div>\r\n                                <h4>{project.title}</h4>\r\n                                <p>{project.description}</p>\r\n                            </div>\r\n                            <div><button\r\n                                className={`likeBtn ${project.votedByMe ? 'liked' : ''}`}\r\n                                onClick={() => this.handleVoting(project.votedByMe, project.id)}\r\n                            >\r\n                                Like{project.votedByMe ? 'd' : ''}\r\n                            </button></div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        token: state.auth.token,\r\n        projects: state.projects.projects\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onProjectsFetch: (token) => dispatch(actions.fetchProjects(token)),\r\n        onProjectVote: (token, type, id) => dispatch(actions.projectVote(token, type, id)),\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects);","import React from 'react';\r\n\r\nimport './NotFound404.css'\r\n\r\nconst NotFound404 = () => {\r\n    return (\r\n        <div className=\"notFound\">\r\n            <h1>404</h1>\r\n            <p>Page not found</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound404;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport * as actions from '../../actions';\r\nimport Homepage from '../../pages/Homepage/Homepage';\r\nimport Login from '../../pages/Login/Login';\r\nimport MyAccount from '../../pages/MyAccount/MyAccount';\r\nimport Register from '../../pages/Register/Register';\r\nimport Topics from '../../pages/Topics/Topics';\r\nimport Projects from '../../pages/Projects/Projects';\r\nimport NotFound404 from '../../pages/NotFound404/NotFound404';\r\n\r\nclass TeamBuilder extends React.Component {\r\n\r\n  componentDidMount = () => {\r\n    if (this.props.token) {\r\n      this.props.onFetchUser(this.props.token);\r\n    }\r\n    if (this.props.companies.length === 0) {\r\n      this.props.onCompanyFetch();\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Homepage} />\r\n        <Route path=\"/login\" exact component={Login} />\r\n        <Route path=\"/register\" exact component={Register} />\r\n        <Route path=\"/my-account\" exact component={MyAccount} />\r\n        <Route path=\"/topics\" exact component={Topics} />\r\n        <Route path=\"/projects\" exact component={Projects} />\r\n        <Route component={NotFound404} />\r\n      </Switch>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    token: state.auth.token,\r\n    companies: state.auth.companies,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    onFetchUser: (token) => dispatch(actions.fetchUser(token)),\r\n    onCompanyFetch: () => dispatch(actions.fetchCompaniesList()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamBuilder);\r\n","import React from 'react';\n\nimport Header from './components/Header/Header';\nimport TeamBuilder from './components/TeamBuilder/TeamBuilder';\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div id=\"main\">\n      <Header />\n      <div className=\"container\">\n        <TeamBuilder />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import * as actionTypes from '../actions/actionTypes';\r\n\r\nlet userToken = sessionStorage.getItem('userToken');\r\n\r\nconst initialState = {\r\n    token: userToken || '',\r\n    userInfo: {},\r\n    companies: [],\r\n    isLoading: false,\r\n    regError: false,\r\n    isRegistered: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_COMPANIES_SUCCESS:\r\n            return {\r\n                ...state,\r\n                companies: action.payload\r\n            }\r\n        case actionTypes.LOGIN_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.LOGIN_SUCCESS:\r\n            return {\r\n                ...state,\r\n                userInfo: action.payload,\r\n                token: action.payload.token,\r\n                isLoading: false,\r\n            }\r\n        case actionTypes.LOGIN_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        case actionTypes.REGISTER_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true,\r\n                regError: false\r\n            }\r\n        case actionTypes.REGISTER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isRegistered: true,\r\n                isLoading: false,\r\n                regError: false\r\n            }\r\n        case actionTypes.REGISTER_FAIL:\r\n            console.log(action)\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                isRegistered: false,\r\n                regError: action.payload\r\n            }\r\n        case actionTypes.LOGOUT_SUCCESS:\r\n            sessionStorage.removeItem('userToken');\r\n            return {\r\n                ...state,\r\n                token: '',\r\n                userInfo: {}\r\n            }\r\n        case actionTypes.FETCH_USER_SUCCESS:\r\n            return {\r\n                ...state,\r\n                userInfo: action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    topicsList: [],\r\n    error: '',\r\n    isLoading: false,\r\n    topicAdded: false\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_TOPICS_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.FETCH_TOPICS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                topicsList: action.payload,\r\n                error: ''\r\n            }\r\n        case actionTypes.FETCH_TOPICS_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        case actionTypes.ADD_TOPIC_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.ADD_TOPIC_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                topicAdded: true,\r\n                error: ''\r\n            }\r\n        case actionTypes.ADD_TOPIC_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        case actionTypes.VOTE_TOPIC_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.VOTE_TOPIC_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: ''\r\n            }\r\n        case actionTypes.VOTE_TOPIC_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        case actionTypes.DELETE_TOPIC_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.DELETE_TOPIC_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: ''\r\n            }\r\n        case actionTypes.DELETE_TOPIC_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import * as actionTypes from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n    projects: [],\r\n    error: '',\r\n    isLoading: false,\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.FETCH_PROJECTS_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.FETCH_PROJECTS_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                projects: action.payload,\r\n                error: ''\r\n            }\r\n        case actionTypes.FETCH_PROJECTS_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        case actionTypes.VOTE_PROJECT_START:\r\n            return {\r\n                ...state,\r\n                isLoading: true\r\n            }\r\n        case actionTypes.VOTE_PROJECT_SUCCESS:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: ''\r\n            }\r\n        case actionTypes.VOTE_PROJECT_FAIL:\r\n            return {\r\n                ...state,\r\n                isLoading: false,\r\n                error: action.payload.message\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default reducer;","import { combineReducers, createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport authReducer  from '../reducers/authReducer';\r\nimport topicsReducer from '../reducers/topicsReducer';\r\nimport teamsReducer from '../reducers/teamsReducer';\r\nimport projectsReducer from '../reducers/projectsReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    auth: authReducer,\r\n    topics: topicsReducer,\r\n    teams: teamsReducer,\r\n    projects: projectsReducer,\r\n});\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter } from 'react-router-dom';\n\nimport App from './App';\nimport store from './store/store';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}